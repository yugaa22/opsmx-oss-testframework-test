on: 
  push:
    branches:
    - main
    - release-*
env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Xmx6g -Xms6g
  CONTAINER_REGISTRY: quay.io/opsmxpublic
jobs:
  build-igor:
    outputs:
      igor: ${{ steps.get-build-name.outputs.igor }}
      igorold: ${{ steps.get-build-name-old.outputs.igorold }}
    if: ${{ true }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout OpsMx igor repo
      uses: actions/checkout@v3
      with:
        repository: yugaa22/igor-oes
        ref: refs/heads/OES-1.30.x
    - name: checking for changes
      run: |
       if [ $(git log --since="$(date) 00:00:00" --format=%H) ]; then 
           echo "There are changes for Today $date"
           git log --since="$(date) 00:00:00" --format=%H         
           echo "CHANGES_EXISTS=true" >> $GITHUB_ENV
         else
           echo "No Changes for Today $date"
           git log --since="$(date) 00:00:00" --format=%H
           echo "CHANGES_EXISTS=false" >> $GITHUB_ENV
         fi 
    - name: Create Git Tag
      uses: actions/github-script@v4
      with:
       github-token: ${{ secrets.GITHUB_TOKEN }}
       script: |
         const { data: { default_branch } } = await github.repos.get({
         owner: context.repo.owner,
         repo: context.repo.repo
         });
          const { data: { object: { sha } } } = await github.repos.getRef({
          owner: context.repo.owner,
          repo: context.repo.repo,
          ref: `heads/${default_branch}`
         });
           await github.git.createRef({
           owner: context.repo.owner,
           repo: context.repo.repo,
           ref: `refs/tags/v1.0.0`,
           sha: sha
         });
    - name: Checkout Tag
      run: |
       git config --local user.email "actions@github.com"
       git config --local user.name "GitHub Actions"
       git checkout tags/v1.0.0
    - uses: actions/setup-java@v3 
      if: ${{ env.CHANGES_EXISTS == 'true' }}
      with:
        distribution: temurin
        java-version: 17
        cache: 'gradle'
    - name: Set up QEMU
      if: ${{ env.CHANGES_EXISTS == 'true' }}
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      if: ${{ env.CHANGES_EXISTS == 'true' }}
      uses: docker/setup-buildx-action@v2
    - name: Prepare build variables
      if: ${{ env.CHANGES_EXISTS == 'true' }}
      id: build_variables
      run: |
          echo ::set-output name=REPO::"ubi8-igor-cve"
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-$(date --utc +'%Y%m%d%H%M')"
    - name: Build
      if: ${{ env.CHANGES_EXISTS == 'true' }}
      run: ./gradlew --no-daemon -PenableCrossCompilerPlugin=true igor-web:installDist -x test
    - name: Login to Quay
      if: ${{ env.CHANGES_EXISTS == 'true' }}
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_KEY }}
    - name: dockerBuildpush
      if: ${{ env.CHANGES_EXISTS == 'true' }}
      uses: docker/build-push-action@v2
      with:
        context: .
        file: docker/ubi8/Dockerfile-dev
        push: false
        tags: |
          "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"
    - id: get-build-name  
      if: ${{ env.CHANGES_EXISTS == 'true' }}
      run: |
           imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
             echo $imageName
             echo "igor=$imageName" >> $GITHUB_OUTPUT
    - name: Checkout  repo
      uses: actions/checkout@v3
    - id: get-build-name-old
      if: ${{ env.CHANGES_EXISTS == 'false' }}
      run: |
           imageName=$(yq '.services.igor.img' bom)
             echo $imageName
             echo "igorold=$imageName" >> $GITHUB_OUTPUT
          
  outputs:
    runs-on: ubuntu-latest
    needs: [build-igor]
    steps:
    - name: Check out Repository
      uses: actions/checkout@v3
    - name: Update bom file
      run: | 

        git config --local user.email "yugaa22@gmail.com"
        git config --local user.name "yugaa22"
        git tag -a v1.0.0 -m "Version 1.0.0"
        git push --tags
        
        git checkout tags/v1.0.0
        
          cp bom bom-old
          
          echo ${{ needs.build-igor.outputs.igor }}        
          echo ${{ needs.build-igor.outputs.igorold }}
        
           if [ '${{ needs.build-igor.outputs.igor }}' ]; then
           
             img=${{ needs.build-igor.outputs.igor }}
             echo $img
             echo "Updating bom file built image"
             yq e -i '.services.igor.img = "${{ needs.build-igor.outputs.igor }}"' bom 
          else
             img=${{ needs.build-igor.outputs.igorold }}
             echo $img
             echo "Updating bom file with old bom"
             yq e -i '.services.igor.img = "${{ needs.build-igor.outputs.igorold }}"' bom 
          fi            
          echo $date >> bom
          
          git config --global user.email "yugaa22@gmail.com"
          git config --global user.name "yugaa22"
          git add .
          git commit -m "updating master Branch images into service settings"
          git push
      env:
         GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
