on: 
  push:
    branches:
    - main
    - release-*
env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Xmx6g -Xms6g
  CONTAINER_REGISTRY: quay.io/opsmxpublic
jobs:
  build-igor:
    outputs:
      igor: ${{ steps.get-build-name.outputs.igor }}
      igorold: ${{ steps.get-build-name-old.outputs.igorold }}
    if: ${{ true }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout OpsMx igor repo
      uses: actions/checkout@v3
      with:
        repository: yugaa22/igor-oes
        ref: refs/heads/OES-1.30.x
    - name: checking for changes
      run: |
       if [ $(git log --since="$(date) 00:00:00" --format=%H) ]; then 
           echo "There are changes for Today $date"
           git log --since="$(date) 00:00:00" --format=%H         
           echo "CHANGES_EXISTS=true" >> $GITHUB_ENV
         else
           echo "No Changes for Today $date"
           git log --since="$(date) 00:00:00" --format=%H
           echo "CHANGES_EXISTS=false" >> $GITHUB_ENV
         fi      
         
    - name: tag in OpsMx igor repo
      uses: actions/checkout@v3
      with:
        repository: yugaa22/igor-oes
        ref: refs/heads/OES-1.30.x
    - run: |
    
    
        commit=$(git rev-parse HEAD)

        # POST a new ref to repo via Github API
        curl -s -X POST https://api.github.com/repos/yugaa22/igor-oes/git/refs -H "Authorization: token ${{secrets.GIT_TOKEN}}"  -d @- << EOF
         {
         "ref": "refs/tags/v-${{ github.run_number }}",
         "sha": "$commit"
        }
        EOF
        
        git branch
        git fetch --all        
        git checkout v-${{ github.run_number }}
        git branch 
        
        
    - name: checkout in OpsMx igor tag
      uses: actions/checkout@v3
      with:
        repository: yugaa22/igor-oes
        ref: refs/tags/v-${{ github.run_number }}
    - uses: actions/setup-java@v3 
      if: ${{ env.CHANGES_EXISTS == 'true' }}
      with:
        distribution: temurin
        java-version: 17
        cache: 'gradle'
    - name: Set up QEMU
      if: ${{ env.CHANGES_EXISTS == 'true' }}
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      if: ${{ env.CHANGES_EXISTS == 'true' }}
      uses: docker/setup-buildx-action@v2
    - name: Prepare build variables
      if: ${{ env.CHANGES_EXISTS == 'true' }}
      id: build_variables
      run: |
          git branch
          echo ::set-output name=REPO::"ubi8-igor-cve"
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-$(date --utc +'%Y%m%d%H%M')"
    - name: Build
      if: ${{ env.CHANGES_EXISTS == 'true' }}
      run: ./gradlew --no-daemon -PenableCrossCompilerPlugin=true igor-web:installDist -x test
    - name: Login to Quay
      if: ${{ env.CHANGES_EXISTS == 'true' }}
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_KEY }}
    - name: dockerBuildpush
      if: ${{ env.CHANGES_EXISTS == 'true' }}
      uses: docker/build-push-action@v2
      with:
        context: .
        file: docker/ubi8/Dockerfile-dev
        push: false
        tags: |
          "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"
    - id: get-build-name  
      if: ${{ env.CHANGES_EXISTS == 'true' }}
      run: |
           imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
             echo $imageName
             echo "igor=$imageName" >> $GITHUB_OUTPUT
    - name: Checkout  repo
      uses: actions/checkout@v3
    - id: get-build-name-old
      if: ${{ env.CHANGES_EXISTS == 'false' }}
      run: |
           imageName=$(yq '.services.igor.img' bom)
             echo $imageName
             echo "igorold=$imageName" >> $GITHUB_OUTPUT
          
  outputs:
    runs-on: ubuntu-latest
    needs: [build-igor]
    steps:
    - name: Check out Repository
      uses: actions/checkout@v3
    - name: Update bom file
      run: | 

        git config --local user.email "yugaa22@gmail.com"
        git config --local user.name "yugaa22"
        git tag -a v-${{ github.run_number }} -m "Version 1.0.0"
        git push --tags
        
        git checkout tags/v-${{ github.run_number }}
        
          cp bom bom-old
          
          echo ${{ needs.build-igor.outputs.igor }}        
          echo ${{ needs.build-igor.outputs.igorold }}
        
           if [ '${{ needs.build-igor.outputs.igor }}' ]; then
           
             img=${{ needs.build-igor.outputs.igor }}
             echo $img
             echo "Updating bom file built image"
             echo  "before update"
             cat bom
             yq e -i '.services.igor.img = "${{ needs.build-igor.outputs.igor }}"' bom 
                          echo  "after update"
                          
                          cat bom
           else
             img=${{ needs.build-igor.outputs.igorold }}
             echo $img
             echo "Updating bom file with old bom"
                          echo  "before update"
             cat bom
             yq e -i '.services.igor.img = "${{ needs.build-igor.outputs.igorold }}"' bom 
                         echo  "after update"
                          
                          cat bom
          fi            
          echo $date >> bom
          
          
          git config --global user.email "yugaa22@gmail.com"
          git config --global user.name "yugaa22"
          git add .
          git commit -m "updating master Branch images "
          git push --tags --force
          #git push origin HEAD:<name-of-remote-branch>
      env:
         GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
