name: Build OSS spinnaker
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      version:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Spinnaker Version'
        # Default value if no value is explicitly provided
        default: '1.30.1'
        # Input has to be provided for the workflow to run
        required: false
        # The data type of the input
        type: string
      organisation:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Your Git Organisation to be used for GitOps'
        # Default value if no value is explicitly provided
        default: 'opsmx'
        # Input has to be provided for the workflow to run
        required: false
        # The data type of the input
        type: string
      repository:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Your Git Repository to be used for GitOps'
        # Default value if no value is explicitly provided
        default: 'cve-target'
        # Input has to be provided for the workflow to run
        required: false
        # The data type of the input
        type: string
      gitusername:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Your Git Username'
        # Default value if no value is explicitly provided
        default: 'yugaa22'
        # Input has to be provided for the workflow to run
        required: false
        # The data type of the input
        type: string
      gittoken:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Your Git Token'
        # Default value if no value is explicitly provided
        default: '1232424'
        # Input has to be provided for the workflow to run
        required: false
        # The data type of the input
        type: string
        
env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Xmx6g -Xms6g
  CONTAINER_REGISTRY: quay.io/opsmxpublic
  
jobs:
  get-bom:
    runs-on: ubuntu-latest
    outputs:
      cloudriver-version: ${{ steps.get-bom.outputs.cloudriver-version }}
    if: ${{ true }}
    steps:
    - name: Checkout OpsMx clouddriver repo
      uses: actions/checkout@v3
    - id: get-bom
      run: |
            wget https://storage.googleapis.com/halconfig/bom/${{ inputs.version }}.yml 
            
            cloudriver-imageVersion=$(cat ${{ inputs.version }}.yml  | yq '.services.clouddriver.version')    
            deck-imageVersion=$(cat ${{ inputs.version }}.yml  | yq '.services.deck.version')
            echo-imageVersion=$(cat ${{ inputs.version }}.yml  | yq '.services.echo.version')
            fiat-imageVersion=$(cat ${{ inputs.version }}.yml  | yq '.services.fiat.version')  
            front50-imageVersion=$(cat ${{ inputs.version }}.yml  | yq '.services.front50.version')
            gate-imageVersion=$(cat ${{ inputs.version }}.yml  | yq '.services.gate.version')
            igor-imageVersion=$(cat ${{ inputs.version }}.yml  | yq '.services.igor.version')
            kayenta-imageVersion=$(cat ${{ inputs.version }}.yml  | yq '.services.kayenta.version')
            orca-imageVersion=$(cat ${{ inputs.version }}.yml  | yq '.services.orca.version')
            rosco-imageVersion=$(cat ${{ inputs.version }}.yml  | yq '.services.rosco.version')

            echo "cloudriver-version=$cloudriver-imageVersion" >> $GITHUB_OUTPUT
            echo "deck-version=$deck-imageVersion" >> $GITHUB_OUTPUT
            echo "echo-version=$echo-imageVersion" >> $GITHUB_OUTPUT
            echo "fiat-version=$fiat-imageVersion" >> $GITHUB_OUTPUT
            echo "front50-version=$front50-imageVersion" >> $GITHUB_OUTPUT
            echo "gate-version=$gate-imageVersion" >> $GITHUB_OUTPUT
            echo "igor-version=$igor-imageVersion" >> $GITHUB_OUTPUT
            echo "kayenta-version=$kayenta-imageVersion" >> $GITHUB_OUTPUT
            echo "orca-version=$orca-imageVersion" >> $GITHUB_OUTPUT
            echo "rosco-version=$rosco-imageVersion" >> $GITHUB_OUTPUT
            
  build-clouddriver:
    runs-on: ubuntu-latest
    needs: [get-bom]
    outputs:
      clouddriver: ${{ steps.get-build-name.outputs.clouddriver }}
    if: ${{ true }}
    steps:
    - name: Checkout OpsMx clouddriver repo
      uses: actions/checkout@v3
      with:
        repository: opsmx/clouddriver
        ref: refs/tags/v${{ needs.get-bom.outputs.cloudriver-version }}
    - uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Prepare build variables
      id: build_variables
      run: |
          echo ::set-output name=REPO::"ubi8-clouddriver"
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-$(date --utc +'%Y%m%d%H%M')"
    - name: Build
      run: ./gradlew --no-daemon -PenableCrossCompilerPlugin=true clouddriver-web:installDist -x test
    - name: Login to Quay
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_KEY }}
    - name: dockerBuildpush
      uses: docker/build-push-action@v2
      with:
        context: .
        file: docker/ubi8/Dockerfile
        push: true
        tags: |
          "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"
    - id: get-build-name
      run: |
            imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
            echo "clouddriver=$imageName" >> $GITHUB_OUTPUT
            
  build-deck:
    runs-on: ubuntu-latest
    needs: [get-bom]
    outputs:
      deck: ${{ steps.get-build-name.outputs.deck }}
    if: ${{ true }}
    steps:
    - name: Checkout OpsMx deck repo
      uses: actions/checkout@v3
      with:
        repository: opsmx/deck
        ref: refs/tags/v${{ needs.get-bom.outputs.deck-version }}
    - uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Prepare build variables
      id: build_variables
      run: |
          echo ::set-output name=REPO::"ubi8-deck-cve"
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-$(date --utc +'%Y%m%d%H%M')"
    - name: Build
      run: |
           cp docker/ubi8/setupapache2.sh docker/setup-apache2.sh
           cp docker/ubi8/runapache2.sh docker/run-apache2.sh
  
             # To remove Special characters
             sed -i 's/\r//' docker/setup-apache2.sh
             sed -i 's/\r//' docker/run-apache2.sh
             
             ./gradlew build --no-daemon -PskipTests 
    - name: Login to Quay
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_KEY }}
    - name: dockerBuildpush
      uses: docker/build-push-action@v2
      with:
        context: .
        file: docker/ubi8/Dockerfile
        push: true
        tags: |
          "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"
    - id: get-build-name
      run: |
            imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
            echo "deck=$imageName" >> $GITHUB_OUTPUT

  build-echo:
    runs-on: ubuntu-latest
    needs: [get-bom]
    outputs:
      echo: ${{ steps.get-build-name.outputs.echo }}
    if: ${{ true }}
    steps:
    - name: Checkout OpsMx echo repo
      uses: actions/checkout@v3
      with:
        repository: opsmx/echo
        ref: refs/tags/v${{ needs.get-bom.outputs.echo-version }}
    - uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Prepare build variables
      id: build_variables
      run: |
          echo ::set-output name=REPO::"ubi8-oes-echo"
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-$(date --utc +'%Y%m%d%H%M')"
    - name: Build
      run: ./gradlew --no-daemon -PenableCrossCompilerPlugin=true echo-web:installDist -x test
    - name: Login to Quay
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_KEY }}
    - name: dockerBuildpush
      uses: docker/build-push-action@v2
      with:
        context: .
        build-args: |
            CUSTOMPLUGIN_RELEASEVERSION=v4.0.3.1-rc7
        file: docker/ubi8/Dockerfile
        push: true
        tags: |
          "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"
    - id: get-build-name
      run: |
            imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
            echo "echo=$imageName" >> $GITHUB_OUTPUT

  build-fiat:
    runs-on: ubuntu-latest
    needs: [get-bom]
    outputs:
      fiat: ${{ steps.get-build-name.outputs.fiat }}
    if: ${{ true }}
    steps:
    - name: Checkout OpsMx fiat repo
      uses: actions/checkout@v3
      with:
        repository: opsmx/fiat
        ref: refs/tags/v${{ needs.get-bom.outputs.fiat-version }}
    - uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Prepare build variables
      id: build_variables
      run: |
          echo ::set-output name=REPO::"ubi8-fiat"
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-$(date --utc +'%Y%m%d%H%M')"
    - name: Build
      run: ./gradlew --no-daemon -PenableCrossCompilerPlugin=true fiat-web:installDist -x test
    - name: Login to Quay
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_KEY }}
    - name: dockerBuildpush
      uses: docker/build-push-action@v2
      with:
        context: .
        file: docker/ubi8/Dockerfile
        push: true
        tags: |
          "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"
    - id: get-build-name
      run: |
            imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
            echo "fiat=$imageName" >> $GITHUB_OUTPUT


  build-front50:
    runs-on: ubuntu-latest
    needs: [get-bom]
    outputs:
      front50: ${{ steps.get-build-name.outputs.front50 }}
    if: ${{ true }}
    steps:
    - name: Checkout OpsMx front50 repo
      uses: actions/checkout@v3
      with:
        repository: opsmx/front50
        ref: refs/tags/v${{ needs.get-bom.outputs.front50-version }}
    - uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Prepare build variables
      id: build_variables
      run: |
          echo ::set-output name=REPO::"ubi8-front50"
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-$(date --utc +'%Y%m%d%H%M')"
    - name: Build
      run: ./gradlew --no-daemon -PenableCrossCompilerPlugin=true front50-web:installDist -x test
    - name: Login to Quay
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_KEY }}
    - name: dockerBuildpush
      uses: docker/build-push-action@v2
      with:
        context: .
        file: docker/ubi8/Dockerfile
        push: true
        tags: |
          "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"
    - id: get-build-name
      run: |
            imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
            echo "front50=$imageName" >> $GITHUB_OUTPUT

  build-gate:
    runs-on: ubuntu-latest    
    needs: [get-bom]
    outputs:
      gate: ${{ steps.get-build-name.outputs.gate }}
    if: ${{ true }}
    steps:
    - name: Checkout OpsMx gate repo
      uses: actions/checkout@v3
      with:
        repository: opsmx/gate
        ref: refs/tags/v${{ needs.get-bom.outputs.gate-version }}
    - uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Prepare build variables
      id: build_variables
      run: |
          echo ::set-output name=REPO::"ubi8-gate"
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-$(date --utc +'%Y%m%d%H%M')"
    - name: Build
      run: |
         ./gradlew --no-daemon -PenableCrossCompilerPlugin=true gate-web:installDist -x test

         ls -ltra

         cp docker/custom-plugin.json .
    - name: Login to Quay
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_KEY }}
    - name: dockerBuildpush
      uses: docker/build-push-action@v2
      with:
        context: .
        build-args: |
            CUSTOMPLUGIN_RELEASEVERSION=v4.0.3.1-rc7
        file: docker/ubi8/Dockerfile
        push: true
        tags: |
          "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"
    - id: get-build-name
      run: |
            imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
            echo "gate=$imageName" >> $GITHUB_OUTPUT

  build-igor:
    runs-on: ubuntu-latest
    needs: [get-bom]
    outputs:
      igor: ${{ steps.get-build-name.outputs.igor }}
    if: ${{ true }}
    steps:
    - name: Checkout OpsMx igor repo
      uses: actions/checkout@v3
      with:
        repository: opsmx/igor
        ref: refs/tags/v${{ needs.get-bom.outputs.igor-version }}
    - uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Prepare build variables
      id: build_variables
      run: |
          echo ::set-output name=REPO::"ubi8-igor"
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-$(date --utc +'%Y%m%d%H%M')"
    - name: Build
      run: ./gradlew --no-daemon -PenableCrossCompilerPlugin=true igor-web:installDist -x test
    - name: Login to Quay
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_KEY }}
    - name: dockerBuildpush
      uses: docker/build-push-action@v2
      with:
        context: .
        file: docker/ubi8/Dockerfile
        push: true
        tags: |
          "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"
    - id: get-build-name
      run: |
            imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
            echo "igor=$imageName" >> $GITHUB_OUTPUT
            

  build-kayenta:
    runs-on: ubuntu-latest
    needs: [get-bom]
    outputs:
      kayenta: ${{ steps.get-build-name.outputs.kayenta }}
    if: ${{ true }}
    steps:
    - name: Checkout OpsMx kayenta repo
      uses: actions/checkout@v3
      with:
        repository: opsmx/kayenta
        ref: refs/tags/v${{ needs.get-bom.outputs.kayenta-version }}
    - uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Prepare build variables
      id: build_variables
      run: |
          echo ::set-output name=REPO::"ubi8-kayenta"
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-$(date --utc +'%Y%m%d%H%M')"
    - name: Build
      run: ./gradlew --no-daemon -PenableCrossCompilerPlugin=true kayenta-web:installDist -x test
    - name: Login to Quay
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_KEY }}
    - name: dockerBuildpush
      uses: docker/build-push-action@v2
      with:
        context: .
        file: docker/ubi8/Dockerfile
        push: true
        tags: |
          "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"
    - id: get-build-name
      run: |
            imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
            echo "kayenta=$imageName" >> $GITHUB_OUTPUT


  build-orca:
    runs-on: ubuntu-latest
    needs: [get-bom]
    outputs:
      orca: ${{ steps.get-build-name.outputs.orca }}
    if: ${{ true }}
    steps:
    - name: Checkout OpsMx orca repo
      uses: actions/checkout@v3
      with:
        repository: opsmx/orca
        ref: refs/tags/v${{ needs.get-bom.outputs.orca-version }}
    - uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Prepare build variables
      id: build_variables
      run: |
          echo ::set-output name=REPO::"ubi8-orca"
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-$(date --utc +'%Y%m%d%H%M')"
    - name: Build
      run: ./gradlew --no-daemon -PenableCrossCompilerPlugin=true orca-web:installDist -x test
    - name: Login to Quay
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_KEY }}
    - name: dockerBuildpush
      uses: docker/build-push-action@v2
      with:
        context: .
        build-args: |
            CUSTOMPLUGIN_RELEASEVERSION=v4.0.3.1-rc7
        file: docker/ubi8/Dockerfile
        push: true
        tags: |
          "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"
    - id: get-build-name
      run: |
            imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
            echo "orca=$imageName" >> $GITHUB_OUTPUT


  build-rosco:
    runs-on: ubuntu-latest
    needs: [get-bom]
    outputs:
      rosco: ${{ steps.get-build-name.outputs.rosco }}
    if: ${{ true }}
    steps:
    - name: Checkout OpsMx rosco repo
      uses: actions/checkout@v3
      with:
        repository: opsmx/rosco
        ref: refs/tags/v${{ needs.get-bom.outputs.rosco-version }}
    - uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Prepare build variables
      id: build_variables
      run: |
          echo ::set-output name=REPO::"ubi8-rosco"
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-$(date --utc +'%Y%m%d%H%M')"
    - name: Build
      run: ./gradlew --no-daemon -PenableCrossCompilerPlugin=true rosco-web:installDist -x test
    - name: Login to Quay
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_KEY }}
    - name: dockerBuildpush
      uses: docker/build-push-action@v2
      with:
        context: .
        file: docker/ubi8/Dockerfile
        push: true
        tags: |
          "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"
    - id: get-build-name
      run: |
            imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
            echo "rosco=$imageName" >> $GITHUB_OUTPUT  


    - name: Create Secret
      env:
          ACCESS_TOKEN: ${{ inputs.gittoken }}
          ORG: ${{ inputs.organisation }}
          #SECRET_NAME: GIT_USERNAME  # Replace with the name you want for the secret
          GITHUB_USERNAME: ${{inputs.gitusername}}
          GITHUB_REPO: ${{ inputs.repository }}
          #LOCAL_FILE_PATH: "ninja-training-cluster.config"
      run: |

             # Base64 encode the content            
             GITUSERNAME_CONTENT=$(echo $${{inputs.gitusername}} | base64 )
             GITTOKEN_CONTENT=$(echo $${{inputs.gittoken}} | base64 )

              # Fetch the public key for the repository
              RESPONSE=$(curl -X GET -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${ACCESS_TOKEN}" "https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}/actions/secrets/public-key")
              
              # Extract the key_id and key from the response
              KEY_ID=$(echo "$RESPONSE" | jq -r '.key_id')
              #KEY=$(echo "$RESPONSE" | jq -r '.key')

              curl -X PUT "https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}/actions/secrets/GIT_USERNAME"   -H "Authorization: token ${ACCESS_TOKEN}"   -H "Accept: application/vnd.github.v3+json"   -d "{\"encrypted_value\": \"${GITUSERNAME_CONTENT}\",\"key_id\": \"${KEY_ID}\"}"


              curl -X PUT "https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}/actions/secrets/GIT_TOKEN"   -H "Authorization: token ${ACCESS_TOKEN}"   -H "Accept: application/vnd.github.v3+json"   -d "{\"encrypted_value\": \"${GITTOKEN_CONTENT}\",\"key_id\": \"${KEY_ID}\"}"





  outputs:
    runs-on: ubuntu-latest
    needs: [build-clouddriver,build-deck,build-echo,build-fiat,build-front50,build-gate,build-igor,build-kayenta,build-orca,build-rosco]
    steps:
    - name: Set up Git config
      run: |
          git config --global user.email "yugaa22@gmail.com"
          git config --global user.name "yugaa22"

    - name: Clone target repo
      run: |

      
          git clone https://github.com/${{ inputs.organisation }}/${{ inputs.repository }} target-repo
  
    - name: Copy files     
      working-directory: ./target-repo
      run: | 
          #ls -ltra
           
          #ls -ltra default/service-settings

          yq eval '(.artifactId |= "${{ needs.build-clouddriver.outputs.clouddriver }}")' -i default/service-settings/clouddriver.yml
          yq eval '(.artifactId |= "${{ needs.build-deck.outputs.deck }}")' -i default/service-settings/deck.yml
          yq eval '(.artifactId |= "${{ needs.build-echo.outputs.echo }}")' -i default/service-settings/echo.yml
          yq eval '(.artifactId |= "${{ needs.build-fiat.outputs.fiat }}")' -i default/service-settings/fiat.yml
          yq eval '(.artifactId |= "${{ needs.build-front50.outputs.front50 }}")' -i default/service-settings/front50.yml
          yq eval '(.artifactId |= "${{ needs.build-gate.outputs.gate }}")' -i default/service-settings/gate.yml
          yq eval '(.artifactId |= "${{ needs.build-igor.outputs.igor }}")' -i default/service-settings/igor.yml
          yq eval '(.artifactId |= "${{ needs.build-kayenta.outputs.kayenta }}")' -i default/service-settings/kayenta.yml
          yq eval '(.artifactId |= "${{ needs.build-orca.outputs.orca }}")' -i default/service-settings/orca.yml
          yq eval '(.artifactId |= "${{ needs.build-rosco.outputs.rosco }}")' -i default/service-settings/rosco.yml

          yq eval '(.artifactId |= "${{ needs.build-clouddriver.outputs.clouddriver }}")' -i default/service-settings/clouddriver-caching.yml
          yq eval '(.artifactId |= "${{ needs.build-clouddriver.outputs.clouddriver }}")' -i default/service-settings/clouddriver-ro.yml
          yq eval '(.artifactId |= "${{ needs.build-clouddriver.outputs.clouddriver }}")' -i default/service-settings/clouddriver-rw.yml
          yq eval '(.artifactId |= "${{ needs.build-clouddriver.outputs.clouddriver }}")' -i default/service-settings/clouddriver-ro-deck.yml

            yq eval '(.artifactId |= "${{ needs.build-echo.outputs.echo }}")' -i default/service-settings/echo-worker.yml
            yq eval '(.artifactId |= "${{ needs.build-echo.outputs.echo }}")' -i default/service-settings/echo-scheduler.yml

          
          #echo artifactId: ${{ needs.build-clouddriver.outputs.clouddriver }} > default/service-settings/clouddriver.yml
          
          #echo artifactId: ${{ needs.build-deck.outputs.deck }} > default/service-settings/deck.yml
          
          #echo artifactId: ${{ needs.build-echo.outputs.echo }} > default/service-settings/echo.yml
          
          #echo artifactId: ${{ needs.build-fiat.outpus.fiat }} > default/service-settings/fiat.yml
          
          #echo artifactId: ${{ needs.build-front50.outputs.front50 }} > default/service-settings/front50.yml
          
          #echo artifactId: ${{ needs.build-gate.outputs.gate }} > default/service-settings/gate.yml
          
          #echo artifactId: ${{ needs.build-igor.outputs.igor }} > default/service-settings/igor.yml
          
          #echo artifactId: ${{ needs.build-kayenta.outputs.kayenta }} > default/service-settings/kayenta.yml
          
          #echo artifactId: ${{ needs.build-orca.outputs.orca }} > default/service-settings/orca.yml
          
          #echo artifactId: ${{ needs.build-rosco.outputs.rosco }} > default/service-settings/rosco.yml
          
          git add default/service-settings/
          
          git commit -m "updating 1.30.1 Branch images into service settings"
          
          #git remote set-url origin https://${{ inputs.gitusername }}:${{ secrets.GIT_TOKEN }}@github.com/${{ inputs.organisation }}/${{ inputs.repository }}

          git remote set-url origin https://${{ inputs.gitusername }}:${{ inputs.gittoken }}@github.com/${{ inputs.organisation }}/${{ inputs.repository }}
          
          git push
      env:
         GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
    - run: echo "🍏 This job's status is ${{ job.status }}."
    

        
