name: Build OSS Nightly spinnaker 
on:
  workflow_dispatch
        
env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Xmx6g -Xms6g
  CONTAINER_REGISTRY: quay.io/opsmxpublic
  
jobs:            
  build-clouddriver:
    runs-on: ubuntu-latest
    outputs:
      clouddriver: ${{ steps.get-build-name.outputs.clouddriver }}
    if: ${{ true }}
    steps:
    - name: Checkout spinnaker clouddriver repo
      uses: actions/checkout@v3
      with:
        repository: spinnaker/clouddriver
        ref: refs/heads/master
    - uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Prepare build variables
      id: build_variables
      run: |
          echo ::set-output name=REPO::"clouddriver"
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-${{ inputs.version }}-v${{ needs.get-bom.outputs.cloudriver-version }}-oss-ubuntu"
    - name: Build
      run: ./gradlew --no-daemon -PenableCrossCompilerPlugin=true clouddriver-web:installDist -x test
    - name: Login to Quay
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_KEY }}
    - name: dockerBuildpush
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Dockerfile.ubuntu
        push: true
        tags: |
          "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"
    - id: get-build-name
      run: |
            imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
            echo "clouddriver=$imageName" >> $GITHUB_OUTPUT
            
  build-deck:
    runs-on: ubuntu-latest
    outputs:
      deck: ${{ steps.get-build-name.outputs.deck }}
    if: ${{ true }}
    steps:
    - name: Checkout spinnaker deck repo
      uses: actions/checkout@v3
      with:
        repository: spinnaker/deck
        ref: refs/heads/master
    - uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Prepare build variables
      id: build_variables
      run: |
          echo ::set-output name=REPO::"deck"
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-${{ inputs.version }}-v${{ needs.get-bom.outputs.deck-version }}-oss-ubuntu"
    - name: Build
      run: |
           # cp docker/ubi8/setupapache2.sh docker/setup-apache2.sh
           # cp docker/ubi8/runapache2.sh docker/run-apache2.sh
  
             # To remove Special characters
            # sed -i 's/\r//' docker/setup-apache2.sh
             #sed -i 's/\r//' docker/run-apache2.sh
             
             ./gradlew build --no-daemon -PskipTests 
    - name: Login to Quay
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_KEY }}
    - name: dockerBuildpush
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Dockerfile.ubuntu
        push: true
        tags: |
          "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"
    - id: get-build-name
      run: |
            imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
            echo "deck=$imageName" >> $GITHUB_OUTPUT

  build-echo:
    runs-on: ubuntu-latest
    outputs:
      echo: ${{ steps.get-build-name.outputs.echo }}
    if: ${{ true }}
    steps:
    - name: Checkout spinnaker echo repo
      uses: actions/checkout@v3
      with:
        repository: spinnaker/echo
        ref: refs/heads/master
    - uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Prepare build variables
      id: build_variables
      run: |
          echo ::set-output name=REPO::"echo"
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-${{ inputs.version }}-v${{ needs.get-bom.outputs.echo-version }}-oss-ubuntu"
    - name: Build
      run: ./gradlew --no-daemon -PenableCrossCompilerPlugin=true echo-web:installDist -x test
    - name: Login to Quay
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_KEY }}
    - name: dockerBuildpush
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Dockerfile.ubuntu
        push: true
        tags: |
          "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"
    - id: get-build-name
      run: |
            imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
            echo "echo=$imageName" >> $GITHUB_OUTPUT

  build-fiat:
    runs-on: ubuntu-latest
    outputs:
      fiat: ${{ steps.get-build-name.outputs.fiat }}
    if: ${{ true }}
    steps:
    - name: Checkout spinnaker fiat repo
      uses: actions/checkout@v3
      with:
        repository: spinnaker/fiat
        ref: refs/heads/master
    - uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Prepare build variables
      id: build_variables
      run: |
          echo ::set-output name=REPO::"fiat"
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-${{ inputs.version }}-v${{ needs.get-bom.outputs.fiat-version }}-oss-ubuntu"
    - name: Build
      run: ./gradlew --no-daemon -PenableCrossCompilerPlugin=true fiat-web:installDist -x test
    - name: Login to Quay
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_KEY }}
    - name: dockerBuildpush
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Dockerfile.ubuntu
        push: true
        tags: |
          "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"
    - id: get-build-name
      run: |
            imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
            echo "fiat=$imageName" >> $GITHUB_OUTPUT


  build-front50:
    runs-on: ubuntu-latest
    outputs:
      front50: ${{ steps.get-build-name.outputs.front50 }}
    if: ${{ true }}
    steps:
    - name: Checkout spinnaker front50 repo
      uses: actions/checkout@v3
      with:
        repository: spinnaker/front50
        ref: refs/heads/master
    - uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Prepare build variables
      id: build_variables
      run: |
          echo ::set-output name=REPO::"front50"
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-${{ inputs.version }}-v${{ needs.get-bom.outputs.front50-version }}-oss-ubuntu"
    - name: Build
      run: ./gradlew --no-daemon -PenableCrossCompilerPlugin=true front50-web:installDist -x test
    - name: Login to Quay
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_KEY }}
    - name: dockerBuildpush
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Dockerfile.ubuntu
        push: true
        tags: |
          "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"
    - id: get-build-name
      run: |
            imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
            echo "front50=$imageName" >> $GITHUB_OUTPUT

  build-gate:
    runs-on: ubuntu-latest    
    outputs:
      gate: ${{ steps.get-build-name.outputs.gate }}
    if: ${{ true }}
    steps:
    - name: Checkout spinnaker gate repo
      uses: actions/checkout@v3
      with:
        repository: spinnaker/gate
        ref: refs/heads/master
    - uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Prepare build variables
      id: build_variables
      run: |
          echo ::set-output name=REPO::"gate"
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-${{ inputs.version }}-v${{ needs.get-bom.outputs.gate-version }}-oss-ubuntu"
    - name: Build
      run: |
         ./gradlew --no-daemon -PenableCrossCompilerPlugin=true gate-web:installDist -x test

         #ls -ltra

         #cp docker/custom-plugin.json .
    - name: Login to Quay
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_KEY }}
    - name: dockerBuildpush
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Dockerfile.ubuntu
        push: true
        tags: |
          "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"
    - id: get-build-name
      run: |
            imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
            echo "gate=$imageName" >> $GITHUB_OUTPUT

  build-igor:
    runs-on: ubuntu-latest
    outputs:
      igor: ${{ steps.get-build-name.outputs.igor }}
    if: ${{ true }}
    steps:
    - name: Checkout spinnaker igor repo
      uses: actions/checkout@v3
      with:
        repository: spinnaker/igor
        ref: refs/heads/master
    - uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Prepare build variables
      id: build_variables
      run: |
          echo ::set-output name=REPO::"igor"
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-${{ inputs.version }}-v${{ needs.get-bom.outputs.igor-version }}-oss-ubuntu"
    - name: Build
      run: ./gradlew --no-daemon -PenableCrossCompilerPlugin=true igor-web:installDist -x test
    - name: Login to Quay
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_KEY }}
    - name: dockerBuildpush
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Dockerfile.ubuntu
        push: true
        tags: |
          "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"
    - id: get-build-name
      run: |
            imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
            echo "igor=$imageName" >> $GITHUB_OUTPUT
            

  build-kayenta:
    runs-on: ubuntu-latest
    outputs:
      kayenta: ${{ steps.get-build-name.outputs.kayenta }}
    if: ${{ true }}
    steps:
    - name: Checkout spinnaker kayenta repo
      uses: actions/checkout@v3
      with:
        repository: spinnaker/kayenta
        ref: refs/heads/master
    - uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Prepare build variables
      id: build_variables
      run: |
          echo ::set-output name=REPO::"kayenta"
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-${{ inputs.version }}-v${{ needs.get-bom.outputs.kayenta-version }}-oss-ubuntu"
    - name: Build
      run: ./gradlew --no-daemon -PenableCrossCompilerPlugin=true kayenta-web:installDist -x test
    - name: Login to Quay
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_KEY }}
    - name: dockerBuildpush
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Dockerfile.ubuntu
        push: true
        tags: |
          "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"
    - id: get-build-name
      run: |
            imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
            echo "kayenta=$imageName" >> $GITHUB_OUTPUT


  build-orca:
    runs-on: ubuntu-latest
    outputs:
      orca: ${{ steps.get-build-name.outputs.orca }}
    if: ${{ true }}
    steps:
    - name: Checkout spinnaker orca repo
      uses: actions/checkout@v3
      with:
        repository: spinnaker/orca
        ref: refs/heads/master
    - uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Prepare build variables
      id: build_variables
      run: |
          echo ::set-output name=REPO::"orca"
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-${{ inputs.version }}-v${{ needs.get-bom.outputs.orca-version }}-oss-ubuntu"
    - name: Build
      run: ./gradlew --no-daemon -PenableCrossCompilerPlugin=true orca-web:installDist -x test
    - name: Login to Quay
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_KEY }}
    - name: dockerBuildpush
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Dockerfile.ubuntu
        push: true
        tags: |
          "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"
    - id: get-build-name
      run: |
            imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
            echo "orca=$imageName" >> $GITHUB_OUTPUT


  build-rosco:
    runs-on: ubuntu-latest
    outputs:
      rosco: ${{ steps.get-build-name.outputs.rosco }}
    if: ${{ true }}
    steps:
    - name: Checkout spinnaker rosco repo
      uses: actions/checkout@v3
      with:
        repository: spinnaker/rosco
        ref: refs/heads/master
    - uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Prepare build variables
      id: build_variables
      run: |
          echo ::set-output name=REPO::"rosco"
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-${{ inputs.version }}-v${{ needs.get-bom.outputs.rosco-version }}-oss-ubuntu"
    - name: Build
      run: ./gradlew --no-daemon -PenableCrossCompilerPlugin=true rosco-web:installDist -x test
    - name: Login to Quay
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_KEY }}
    - name: dockerBuildpush
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Dockerfile.ubuntu
        push: true
        tags: |
          "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"
    - id: get-build-name
      run: |
            imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
            echo "rosco=$imageName" >> $GITHUB_OUTPUT  
            
  

  outputs:
    runs-on: ubuntu-latest
    needs: [build-clouddriver,build-deck,build-echo,build-fiat,build-front50,build-gate,build-igor,build-kayenta,build-orca,build-rosco]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: create artifact     
      #working-directory: ./target-repo
      run: | 
          ls  -ltra

          yq eval '.artifactSources.services.clouddriver |= "${{ needs.build-clouddriver.outputs.clouddriver }}"' -i bom
          yq eval '.artifactSources.services.deck |= "${{ needs.build-deck.outputs.deck }}"' -i bom
          yq eval '.artifactSources.services.echo |= "${{ needs.build-echo.outputs.echo }}"' -i bom
          yq eval '.artifactSources.services.fiat |= "${{ needs.build-fiat.outputs.fiat }}"' -i bom
          yq eval '.artifactSources.services.front50 |= "${{ needs.build-front50.outputs.front50 }}"' -i bom
          yq eval '.artifactSources.services.gate |= "${{ needs.build-gate.outputs.gate }}"' -i bom
          yq eval '.artifactSources.services.igor |= "${{ needs.build-igor.outputs.igor }}"' -i bom
          yq eval '.artifactSources.services.kayenta |= "${{ needs.build-kayenta.outputs.kayenta }}"' -i bom
          yq eval '.artifactSources.services.orca |= "${{ needs.build-orca.outputs.orca }}"' -i bom
          yq eval '.artifactSources.services.rosco |= "${{ needs.build-rosco.outputs.rosco }}"' -i bom
        
           echo  $date
           
          git add bom          
          git commit -m "updating Nightly Master-Branch images into bom"
          git push
      env:
         GITHUB_TOKEN: ${{ inputs.gittoken }}
    - run: echo "🍏 This job's status is ${{ job.status }}."
    

        
